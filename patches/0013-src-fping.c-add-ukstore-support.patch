From 7f33d25607de4c3b4cc2dfb60fb9cfbdeee811a4 Mon Sep 17 00:00:00 2001
From: Ethan Cotterell <e.cotterell@lancaster.ac.uk>
Date: Wed, 30 Jun 2021 14:53:49 +0100
Subject: [PATCH 13/16] src/fping.c: add ukstore support.

Supported metrics are latest, minimum and maximum response times
---
 src/fping.c | 99 ++++++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 95 insertions(+), 4 deletions(-)

diff --git a/src/fping.c b/src/fping.c
index ed962f1..99fb91e 100644
--- a/src/fping.c
+++ b/src/fping.c
@@ -84,6 +84,10 @@ extern "C" {
 
 #include <sys/select.h>
 
+#ifdef CONFIG_FPING_UKSTORE_SUPPORT
+# include <uk/store.h>
+#endif
+
 /*** compatibility ***/
 
 /* Mac OS X's getaddrinfo() does not fail if we use an invalid combination,
@@ -395,6 +399,93 @@ struct event *host_get_timeout_event(HOST_ENTRY *h, int index);
 void stats_add(HOST_ENTRY *h, int index, int success, int64_t latency);
 void update_current_time();
 
+#ifdef CONFIG_FPING_UKSTORE_SUPPORT
+int latest_getter(__s64 *dst);
+int min_getter(__s64 *dst);
+int max_getter(__s64 *dst);
+
+UK_STORE_STATIC_ENTRY(fping_latest, s64, latest_getter, NULL);
+UK_STORE_STATIC_ENTRY(fping_minimum, s64, min_getter, NULL);
+UK_STORE_STATIC_ENTRY(fping_maximum, s64, max_getter, NULL);
+#endif
+
+/************************************************************
+
+  ukstore getter functions
+
+*************************************************************
+
+  Inputs: dst: pointer to storage destination of data
+
+  Description:
+
+  Gets a metric about the ping stats and copies it into the
+  location provided.
+
+  `latest_getter`: get the most recent latency metric for
+                   the first host in the HOST_ENTRY table
+  `min_getter`   : get the minimum latency metric for the
+                   first host in the HOST_ENTRY table
+  `max_getter`   : get the maximum latency metric for the
+                   first host in the HOST_ENTRY table
+
+
+************************************************************/
+
+int latest_getter(__s64 *dst) {
+  HOST_ENTRY *h;
+
+  if (num_hosts != 1) {
+    fprintf(stderr, "unsupported number of hosts (%d)\n", num_hosts);
+    return -1;
+  }
+
+  h = table[0];
+  if (h->num_sent == 0) {
+    fprintf(stderr, "no response times to report\n");
+    return -1;
+  }
+  *dst = h->resp_times[h->num_sent - 1];
+
+  return 0;
+}
+
+int min_getter(__s64 *dst) {
+  HOST_ENTRY *h;
+
+  if (num_hosts != 1) {
+    fprintf(stderr, "unsupported number of hosts (%d)\n", num_hosts);
+    return -1;
+  }
+
+  h = table[0];
+  if (h->num_sent == 0) {
+    fprintf(stderr, "no response times to report\n");
+    return -1;
+  }
+  *dst = h->min_reply;
+
+  return 0;
+}
+
+int max_getter(__s64 *dst) {
+  HOST_ENTRY *h;
+
+  if (num_hosts != 1) {
+    fprintf(stderr, "unsupported number of hosts (%d)\n", num_hosts);
+    return -1;
+  }
+
+  h = table[0];
+  if (h->num_sent == 0) {
+    fprintf(stderr, "no response time to report\n");
+    return -1;
+  }
+  *dst = h->max_reply;
+
+  return 0;
+}
+
 /************************************************************
 
   Function: main
@@ -1334,7 +1425,7 @@ void main_loop()
                 host_add_ping_event(h, event->ping_index+1, event->ev_time + perhost_interval);
             }
         }
-        
+
         wait_for_reply:
 
         /* When is the next ping next event? */
@@ -1364,7 +1455,7 @@ void main_loop()
                     wait_time_ns = 0;
                 }
             }
-            
+
             dbg_printf("next timeout event in %.0f ms (%s)\n", wait_time_timeout / 1e6, event_queue_timeout.first->host->host);
         }
 
@@ -2352,7 +2443,7 @@ int wait_for_reply(int64_t wait_time)
         min_reply = this_reply;
     sum_replies += this_reply;
     total_replies++;
-    
+
     /* initialize timeout to initial timeout (without backoff) */
     h->timeout = timeout;
 
@@ -2361,7 +2452,7 @@ int wait_for_reply(int64_t wait_time)
     if(timeout_event) {
         ev_remove(&event_queue_timeout, timeout_event);
     }
-    
+
     /* print "is alive" */
     if (h->num_recv == 1) {
         num_alive++;
-- 
2.30.2

